# Дейсвтия по умолчанию
iptables -P INPUT DROP
iptables -P OUTPUT DROP
iptables -P FORWARD DROP

# Разрешаем обмен по локальной петле

iptables -A INPUT -i lo -j ACCEPT
iptables -A OUTPUT -o lo -j ACCEPT

# Разрешаем пакеты icmp ( для обмена служебной информауией)
iptables -A INPUT -p icmp -j ACCEPT
iptables -A OUTPUT -p icmp -j ACCEPT

# РАЗРЕШАЕМ СОЕДИНЕНИЕ С ДИНАМИЧЕСКИХ ПОРТОВ
iptables -A OUTPUT -p TCP -m tcp --sport 32768:61000 -j ACCEPT
iptables -A OUTPUT -p UDP -m udp --sport 32768:61000 -j ACCEPT

# Разрешить только те пакеты, которые мы запросили

iptables -A INPUT -p TCP -m state --state ESTABLISHED,RELATED -j ACCEPT
iptables -A INPUT -p UDP -m state --state ESTABLISHED,RELATED -j ACCEPT

# Но если работаем как сервер SSH, следует разрешить и нужные порта
iptables -A OUTPUT -o enp0s3 -p tcp -m tcp --dport 22 -j ACCEPT
iptables -A OUTPUT -o eth0 -p tcp -m tcp --sport 80 -j ACCEPT
iptables -A OUTPUT -o eth0 -p tcp -m tcp --sport 22 -j ACCEPT
iptables -A OUTPUT -o enp0s3 -p tcp -m tcp --dport 80 -j ACCEPT

### iptables -A INPUT -i eth0 -p tcp -m tcp --dport 22 -j ACCEPT


### Задание 3. Настроить iptables: разрешить подключения только на 22-й и 80-й порты.

На гостевой машине
```bash
ing@shikin-test:~$ sudo iptables -S
-P INPUT DROP
-P FORWARD DROP
-P OUTPUT DROP
-A INPUT -i lo -j ACCEPT
-A INPUT -p icmp -j ACCEPT
-A INPUT -p tcp -m state --state RELATED,ESTABLISHED -j ACCEPT
-A INPUT -p udp -m state --state RELATED,ESTABLISHED -j ACCEPT
-A INPUT -i enp0s3 -p tcp -m tcp --dport 22 -j ACCEPT
-A INPUT -i enp0s3 -p tcp -m tcp --dport 80 -j ACCEPT
-A OUTPUT -o lo -j ACCEPT
-A OUTPUT -p icmp -j ACCEPT
-A OUTPUT -p tcp -m tcp --sport 32768:61000 -j ACCEPT
-A OUTPUT -p udp -m udp --sport 32768:61000 -j ACCEPT
-A OUTPUT -o enp0s3 -p tcp -m tcp --sport 22 -j ACCEPT
-A OUTPUT -o enp0s3 -p tcp -m tcp --sport 80 -j ACCEPT
ing@shikin-test:~$ 
ing@shikin-test:~$ cd http/
ing@shikin-test:~/http$ ll
total 12
drwxr-xr-x 2 root root 4096 Dec  6 12:30 ./
drwxr-xr-x 4 ing  ing  4096 Dec  6 12:24 ../
-rw-r--r-- 1 root root   22 Dec  6 12:30 index.html
ing@shikin-test:~/http$ cat index.html 
<h1>Hello world</h1>
ing@shikin-test:~/http$ python3 -m http.server
Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...
^C
Keyboard interrupt received, exiting.
ing@shikin-test:~/http$ 
```

Пробуем подключиться с хост-машины
```bash
ing@shikin:~$ wget -t 1 -T 2 -O /dev/stdout http://192.168.1.38:8000
--2020-12-06 16:50:21--  http://192.168.1.38:8000/
Подключение к 192.168.1.38:8000... ошибка: Время ожидания соединения истекло.
Завершение.

ing@shikin:~$ 
```

Добавляем соответствующие правила на гостевой и запускаем вебсервер
```bash
ing@shikin-test:~/http$ sudo iptables -A INPUT -i enp0s3 -p tcp -m tcp --dport 8000 -j ACCEPT
ing@shikin-test:~/http$ sudo iptables -A OUTPUT -o enp0s3 -p tcp -m tcp --sport 8000 -j ACCEPT
ing@shikin-test:~/http$ sudo iptables -S
-P INPUT DROP
-P FORWARD DROP
-P OUTPUT DROP
-A INPUT -i lo -j ACCEPT
-A INPUT -p icmp -j ACCEPT
-A INPUT -p tcp -m state --state RELATED,ESTABLISHED -j ACCEPT
-A INPUT -p udp -m state --state RELATED,ESTABLISHED -j ACCEPT
-A INPUT -i enp0s3 -p tcp -m tcp --dport 22 -j ACCEPT
-A INPUT -i enp0s3 -p tcp -m tcp --dport 80 -j ACCEPT
-A INPUT -i enp0s3 -p tcp -m tcp --dport 8000 -j ACCEPT
-A OUTPUT -o lo -j ACCEPT
-A OUTPUT -p icmp -j ACCEPT
-A OUTPUT -p tcp -m tcp --sport 32768:61000 -j ACCEPT
-A OUTPUT -p udp -m udp --sport 32768:61000 -j ACCEPT
-A OUTPUT -o enp0s3 -p tcp -m tcp --sport 22 -j ACCEPT
-A OUTPUT -o enp0s3 -p tcp -m tcp --sport 80 -j ACCEPT
-A OUTPUT -o enp0s3 -p tcp -m tcp --sport 8000 -j ACCEPT
ing@shikin-test:~/http$ python3 -m http.server
Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...
```

Пробуем подключиться с хост-машины
```bash
ing@shikin:~$ wget -t 1 -T 2 -O /dev/stdout http://192.168.1.38:8000
--2020-12-06 16:58:02--  http://192.168.1.38:8000/
Подключение к 192.168.1.38:8000... соединение установлено.
HTTP-запрос отправлен. Ожидание ответа… 200 OK
Длина: 22 [text/html]
Сохранение в: «/dev/stdout»

/dev/stdout                                  0%[                                                                                         ]       0  --.-KB/s               <h1>Hello world</h1>

/dev/stdout                                100%[========================================================================================>]      22  --.-KB/s    за 0s      

2020-12-06 16:58:02 (2,54 MB/s) - «/dev/stdout» сохранён [22/22]

ing@shikin:~$ 
```

На гостевой видим запрос
```bash
ing@shikin-test:~/http$ python3 -m http.server
Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...
192.168.1.30 - - [06/Dec/2020 12:58:02] "GET / HTTP/1.1" 200 -



-------- ТЕОРИЯ 


Основы сетевой безопасности и журналирование событий операционной системы
Информационная безопасность и построение защищённых серверов — отдельное направление в мире информационных технологий. Мы рассмотрим базовые аспекты работы netfilter и iptables — инструмента управления netfilter. Они понадобятся нам для понимания, например, построения сетевого взаимодействия между операционной системой и системой контейнерной виртуализации Docker.
Netfilter — встроенный в ядро Linux сетевой фильтр. Для управления netfilter служит утилита iptables. Основа iptables — таблицы, в которых содержатся цепочки с правилами. Основная работа происходит с двумя таблицами: 
Таблица filter. В этой таблице происходит фильтрация входящего и исходящего трафика, а также транзитный трафик.
Таблица nat. Необходима для трансляции адресов и портов.
В каждой таблице есть цепочки — наборы правил, согласно которым обрабатывается тот или иной трафик. У каждой цепочки есть политики по умолчанию, согласно этим политикам трафик обрабатывается, если не попадает ни под одно из правил.
Существует 5 типов стандартных цепочек, встроенных в систему:
PREROUTING — для изначальной обработки входящих пакетов.
INPUT — для входящих пакетов, адресованных непосредственно локальному процессу (клиенту или серверу).
FORWARD — для входящих пакетов, перенаправленных на выход. Заметьте, что перенаправляемые пакеты проходят сначала цепь PREROUTING, затем FORWARD и POSTROUTING.
OUTPUT — для пакетов, генерируемых локальными процессами.
POSTROUTING — для окончательной обработки исходящих пакетов.
Политики для цепочки устанавливаются следующим образом:
iptables -P имя_цепочки Действие 

Например, iptables -P INPUT ACCEPT разрешит весь входящий трафик, действует для таблицы filter. Если нам необходимо установить политику в конкретной таблице, то через параметр -t нужно передать имя таблицы, например: iptables-t nat -P INPUT ACCEPT. В Ubuntu ACCEPT — политика по умолчанию для всех таблиц и цепочек. Действует правило: разрешено всё, за исключением того, что запрещено.
Правила в цепочках создаются следующим образом:
iptables -A имя_цепочки -p протокол --dport порт -j действие

Например: iptables -A INPUT -p tcp --dport 80 -j ACCEPT. В данном правиле мы добавляем в iptables, в таблицу filter правило, разрешающее подключения по протоколу TCP на порт 80 нашего сервера. 
Также можно разрешить или ограничить подключения для определённых источников, используя параметр -s — source, например: iptables -A INPUT -p tcp -s 192.168.0.100 --dport 80 -j DROP. Здесь мы запретим все подключения по протоколу TCP, исходящие соединения от хоста с IP-адресом 192.168.0.100 на порт 80 нашего сервера.
Используя таблицу nat, мы можем организовать проброс портов внутрь нашей сети. Для этого необходимо проделать следующее:
Включить переадресацию трафика на уровне ядра, изменив значение параметра net.ipv4.ip_forward на 1: sudo sysctl -w net.ipv4.ip_forward=1.
Убедиться, что политика по умолчанию для транзитного трафика: ACCEPT: iptables -A FORWARD -j ACCEPT.
Настроить модификацию адреса назначения (Destination) DNAT и модификацию адреса отправителя (Source) SNAT. Действие DNAT работает с цепочкой PREROUTING таблицы nat. В этой цепочке будет изменяться адрес назначения пакета, чтобы он достиг нужной нам цели. Действие SNAT работает с цепочкой POSTROUTING таблицы nat. В этой цепочке произойдёт модификация адреса источника и замена его на адрес маршрутизатора. Например:
iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j DNAT --to-destination 10.0.0.2 пробросит все входящие соединения на порт 80 нашего сервера, внутрь сети, на хост 10.0.0.2. 
iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080 организует проброс портов входящего трафика с 80-го порта нашего сервера на порт 8080 нашего сервера.
iptables -t nat -A POSTROUTING -o eth1 -p tcp --dport 80 -d 10.0.0.2 -j SNAT --to-source 10.0.0.1 модифицирует IP-адрес источника из локальной сети на адрес маршрутизатора локальной сети.
Посмотреть текущие правила iptables можно следующим образом:
iptables -t имя_таблицы -L покажет правила, установленные в таблице. Если не указать имя таблицы, будут показаны правила из цепочки filter. Например, iptables -L покажет правила в цепочках таблицы filter, а iptables -t nat -L покажет правила в цепочках таблицы nat.
iptables-save сделает дамп правил и выведет его на экран. Также команду iptables-save можно использовать для сохранения правил в файл: iptables-save > iptables.bk. Восстановить правила можно, используя команду iptables-restore: iptables-restore<iptables.bk. 
